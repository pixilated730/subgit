#!/bin/bash

CONFIG_DIR="$HOME/.subdirconfig"
SCANNED_PATHS_FILE="$CONFIG_DIR/scanned_paths.json"

# Function to check and set up the configuration directory and file
check_config() {
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir -p "$CONFIG_DIR"
    fi

    if [ ! -f "$SCANNED_PATHS_FILE" ]; then
        echo '{"scanned":[],"vulnerable":[]}' > "$SCANNED_PATHS_FILE"
    fi
}

# Function to verify the structure of the JSON file
verify_json_structure() {
    if ! jq -e '.scanned' "$SCANNED_PATHS_FILE" > /dev/null 2>&1 || ! jq -e '.vulnerable' "$SCANNED_PATHS_FILE" > /dev/null 2>&1; then
        echo "Invalid JSON structure. Resetting the scanned paths file."
        echo '{"scanned":[],"vulnerable":[]}' > "$SCANNED_PATHS_FILE"
    fi
}

# Function to handle command line arguments
handle_args() {
    if [ "$1" == "--continue" ] || [ "$1" == "-c" ]; then
        echo "Continuing from where left off."
    elif [ "$1" == "--delete" ] || [ "$1" == "-d" ]; then
        echo "Deleting scanned paths and starting fresh."
        rm -f "$SCANNED_PATHS_FILE"
        echo '{"scanned":[],"vulnerable":[]}' > "$SCANNED_PATHS_FILE"
        exit 0
    else
        echo "Invalid argument. Usage: $0 [--continue|-c | --delete|-d]"
        exit 1
    fi
}

# Function to check if a domain and path have already been scanned
is_path_scanned() {
    domain=$1
    path=$2
    jq -e ".scanned[] | select(.domain == \"$domain\" and .path == \"$path\")" "$SCANNED_PATHS_FILE" > /dev/null 2>&1
}

# Function to check if a domain and path are vulnerable
is_path_vulnerable() {
    domain=$1
    path=$2
    jq -e ".vulnerable[] | select(.domain == \"$domain\" and .path == \"$path\")" "$SCANNED_PATHS_FILE" > /dev/null 2>&1
}

# Function to mark a path as scanned
mark_path_as_scanned() {
    domain=$1
    path=$2
    jq ".scanned += [{\"domain\": \"$domain\", \"path\": \"$path\"}]" "$SCANNED_PATHS_FILE" > "$CONFIG_DIR/tmp.$$.json" && mv "$CONFIG_DIR/tmp.$$.json" "$SCANNED_PATHS_FILE"
}

# Function to mark a path as vulnerable
mark_path_as_vulnerable() {
    domain=$1
    path=$2
    jq ".vulnerable += [{\"domain\": \"$domain\", \"path\": \"$path\"}]" "$SCANNED_PATHS_FILE" > "$CONFIG_DIR/tmp.$$.json" && mv "$CONFIG_DIR/tmp.$$.json" "$SCANNED_PATHS_FILE"
}

# Check and set up configuration
check_config

# Verify the JSON structure
verify_json_structure

# Handle script arguments
if [ $# -eq 1 ]; then
    handle_args "$1"
    shift
elif [ $# -ne 0 ]; then
    echo "Invalid number of arguments. Usage: $0 [--continue|-c | --delete|-d]"
    exit 1
fi

# Function to check if the content is a valid git config file
is_valid_git_config() {
    content=$1
    if echo "$content" | grep -q '\[remote "origin"\]'; then
        return 0
    else
        return 1
    fi
}

# Function to fetch the config file content
fetch_config_content() {
    url=$1
    content=$(curl -s --max-time 10 "$url")
    echo "$content"
}

# Function to check both HTTP and HTTPS URLs
check_url() {
    domain=$1
    path=$2

    for scheme in https http; do
        config_url="$scheme://$domain$path/.git/config"
        config_content=$(fetch_config_content "$config_url")

        if is_valid_git_config "$config_content"; then
            echo "Vulnerable URL found: $config_url"
            mark_path_as_vulnerable "$domain" "$path"
            return 0
        fi
    done

    return 1
}

# Read URLs from input
while read -r url; do
    # Skip empty lines
    if [ -z "$url" ]; then
        continue
    fi

    if [[ ! "$url" =~ ^http ]]; then
        url="http://$url"
    fi
    
    domain=$(echo "$url" | awk -F/ '{print $3}')
    path=$(echo "$url" | awk -F/ '{for (i=4; i<=NF; i++) printf "/" $i; print ""}')
    
    # Ensure path is not empty
    if [ -z "$path" ]; then
        path="/"
    fi

    # Traverse up the path
    while true; do
        if is_path_scanned "$domain" "$path"; then
            if is_path_vulnerable "$domain" "$path"; then
                echo "Vulnerable URL found: http://$domain$path/.git/config"
            fi
            break
        fi

        if check_url "$domain" "$path"; then
            break
        fi

        mark_path_as_scanned "$domain" "$path"

        parent_path=$(dirname "$path")
        if [ "$parent_path" == "." ] || [ "$parent_path" == "/" ] || [ "$parent_path" == "$path" ]; then
            break
        fi
        path="$parent_path/"
    done

    # Check the root domain path
    if ! is_path_scanned "$domain" "/"; then
        check_url "$domain" "/"
        mark_path_as_scanned "$domain" "/"
    fi

done < "${1:-/dev/stdin}"